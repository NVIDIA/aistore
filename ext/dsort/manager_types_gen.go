// msgp -file <path to dsort/manager_types.go> -tests=false -marshal=false -unexported
// Code generated by the command above; see docs/msgp.md. DO NOT EDIT.
package dsort

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/NVIDIA/aistore/ext/dsort/extract"
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CreationPhaseMetadata) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "shards":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shards")
				return
			}
			if cap(z.Shards) >= int(zb0002) {
				z.Shards = (z.Shards)[:zb0002]
			} else {
				z.Shards = make([]*extract.Shard, zb0002)
			}
			for za0001 := range z.Shards {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Shards", za0001)
						return
					}
					z.Shards[za0001] = nil
				} else {
					if z.Shards[za0001] == nil {
						z.Shards[za0001] = new(extract.Shard)
					}
					err = z.Shards[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Shards", za0001)
						return
					}
				}
			}
		case "send_order":
			var zb0003 uint32
			zb0003, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "SendOrder")
				return
			}
			if z.SendOrder == nil {
				z.SendOrder = make(map[string]*extract.Shard, zb0003)
			} else if len(z.SendOrder) > 0 {
				for key := range z.SendOrder {
					delete(z.SendOrder, key)
				}
			}
			for zb0003 > 0 {
				zb0003--
				var za0002 string
				var za0003 *extract.Shard
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "SendOrder")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "SendOrder", za0002)
						return
					}
					za0003 = nil
				} else {
					if za0003 == nil {
						za0003 = new(extract.Shard)
					}
					err = za0003.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "SendOrder", za0002)
						return
					}
				}
				z.SendOrder[za0002] = za0003
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CreationPhaseMetadata) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "shards"
	err = en.Append(0x82, 0xa6, 0x73, 0x68, 0x61, 0x72, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Shards)))
	if err != nil {
		err = msgp.WrapError(err, "Shards")
		return
	}
	for za0001 := range z.Shards {
		if z.Shards[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Shards[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Shards", za0001)
				return
			}
		}
	}
	// write "send_order"
	err = en.Append(0xaa, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.SendOrder)))
	if err != nil {
		err = msgp.WrapError(err, "SendOrder")
		return
	}
	for za0002, za0003 := range z.SendOrder {
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "SendOrder")
			return
		}
		if za0003 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0003.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "SendOrder", za0002)
				return
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CreationPhaseMetadata) Msgsize() (s int) {
	s = 1 + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.Shards {
		if z.Shards[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Shards[za0001].Msgsize()
		}
	}
	s += 11 + msgp.MapHeaderSize
	if z.SendOrder != nil {
		for za0002, za0003 := range z.SendOrder {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002)
			if za0003 == nil {
				s += msgp.NilSize
			} else {
				s += za0003.Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RemoteResponse) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "r":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Record")
					return
				}
				z.Record = nil
			} else {
				if z.Record == nil {
					z.Record = new(extract.Record)
				}
				err = z.Record.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Record")
					return
				}
			}
		case "o":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "RecordObj")
					return
				}
				z.RecordObj = nil
			} else {
				if z.RecordObj == nil {
					z.RecordObj = new(extract.RecordObj)
				}
				err = z.RecordObj.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "RecordObj")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RemoteResponse) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "r"
	err = en.Append(0x82, 0xa1, 0x72)
	if err != nil {
		return
	}
	if z.Record == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.Record.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Record")
			return
		}
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	if z.RecordObj == nil {
		err = en.WriteNil()
		if err != nil {
			return
		}
	} else {
		err = z.RecordObj.EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "RecordObj")
			return
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RemoteResponse) Msgsize() (s int) {
	s = 1 + 2
	if z.Record == nil {
		s += msgp.NilSize
	} else {
		s += z.Record.Msgsize()
	}
	s += 2
	if z.RecordObj == nil {
		s += msgp.NilSize
	} else {
		s += z.RecordObj.Msgsize()
	}
	return
}
