// msgp -file <path to dsort/extract/record_gen.go> -tests=false -marshal=false -unexported
// Code generated by the command above; see docs/msgp.md. DO NOT EDIT.
package extract

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Record) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "k":
			z.Key, err = dc.ReadIntf()
			if err != nil {
				err = msgp.WrapError(err, "Key")
				return
			}
		case "n":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "d":
			z.DaemonID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "DaemonID")
				return
			}
		case "o":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Objects")
				return
			}
			if cap(z.Objects) >= int(zb0002) {
				z.Objects = (z.Objects)[:zb0002]
			} else {
				z.Objects = make([]*RecordObj, zb0002)
			}
			for za0001 := range z.Objects {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Objects", za0001)
						return
					}
					z.Objects[za0001] = nil
				} else {
					if z.Objects[za0001] == nil {
						z.Objects[za0001] = new(RecordObj)
					}
					err = z.Objects[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Objects", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Record) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "k"
	err = en.Append(0x84, 0xa1, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteIntf(z.Key)
	if err != nil {
		err = msgp.WrapError(err, "Key")
		return
	}
	// write "n"
	err = en.Append(0xa1, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "d"
	err = en.Append(0xa1, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.DaemonID)
	if err != nil {
		err = msgp.WrapError(err, "DaemonID")
		return
	}
	// write "o"
	err = en.Append(0xa1, 0x6f)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Objects)))
	if err != nil {
		err = msgp.WrapError(err, "Objects")
		return
	}
	for za0001 := range z.Objects {
		if z.Objects[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Objects[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Objects", za0001)
				return
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Record) Msgsize() (s int) {
	s = 1 + 2 + msgp.GuessSize(z.Key) + 2 + msgp.StringPrefixSize + len(z.Name) + 2 + msgp.StringPrefixSize + len(z.DaemonID) + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.Objects {
		if z.Objects[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.Objects[za0001].Msgsize()
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RecordObj) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "p":
			z.ContentPath, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ContentPath")
				return
			}
		case "ft":
			z.ObjectFileType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ObjectFileType")
				return
			}
		case "st":
			z.StoreType, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "StoreType")
				return
			}
		case "f":
			z.Offset, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		case "ms":
			z.MetadataSize, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "MetadataSize")
				return
			}
		case "s":
			z.Size, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "Size")
				return
			}
		case "e":
			z.Extension, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Extension")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RecordObj) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	if z.Offset == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "p"
	err = en.Append(0xa1, 0x70)
	if err != nil {
		return
	}
	err = en.WriteString(z.ContentPath)
	if err != nil {
		err = msgp.WrapError(err, "ContentPath")
		return
	}
	// write "ft"
	err = en.Append(0xa2, 0x66, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.ObjectFileType)
	if err != nil {
		err = msgp.WrapError(err, "ObjectFileType")
		return
	}
	// write "st"
	err = en.Append(0xa2, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.StoreType)
	if err != nil {
		err = msgp.WrapError(err, "StoreType")
		return
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "f"
		err = en.Append(0xa1, 0x66)
		if err != nil {
			return
		}
		err = en.WriteInt64(z.Offset)
		if err != nil {
			err = msgp.WrapError(err, "Offset")
			return
		}
	}
	// write "ms"
	err = en.Append(0xa2, 0x6d, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.MetadataSize)
	if err != nil {
		err = msgp.WrapError(err, "MetadataSize")
		return
	}
	// write "s"
	err = en.Append(0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Size)
	if err != nil {
		err = msgp.WrapError(err, "Size")
		return
	}
	// write "e"
	err = en.Append(0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Extension)
	if err != nil {
		err = msgp.WrapError(err, "Extension")
		return
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RecordObj) Msgsize() (s int) {
	s = 1 + 2 + msgp.StringPrefixSize + len(z.ContentPath) + 3 + msgp.StringPrefixSize + len(z.ObjectFileType) + 3 + msgp.StringPrefixSize + len(z.StoreType) + 2 + msgp.Int64Size + 3 + msgp.Int64Size + 2 + msgp.Int64Size + 2 + msgp.StringPrefixSize + len(z.Extension)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Records) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "a":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "arr")
				return
			}
			if cap(z.arr) >= int(zb0002) {
				z.arr = (z.arr)[:zb0002]
			} else {
				z.arr = make([]*Record, zb0002)
			}
			for za0001 := range z.arr {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "arr", za0001)
						return
					}
					z.arr[za0001] = nil
				} else {
					if z.arr[za0001] == nil {
						z.arr[za0001] = new(Record)
					}
					err = z.arr[za0001].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "arr", za0001)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Records) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "a"
	err = en.Append(0x81, 0xa1, 0x61)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.arr)))
	if err != nil {
		err = msgp.WrapError(err, "arr")
		return
	}
	for za0001 := range z.arr {
		if z.arr[za0001] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.arr[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "arr", za0001)
				return
			}
		}
	}
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Records) Msgsize() (s int) {
	s = 1 + 2 + msgp.ArrayHeaderSize
	for za0001 := range z.arr {
		if z.arr[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += z.arr[za0001].Msgsize()
		}
	}
	return
}
