# Copyright (c) 2025, NVIDIA CORPORATION. All rights reserved.

# This .env script will set up convenient ENVs used to both tune a test deployment
# of AIStore and quantify test file sizes that will trigger unique code paths
# involved during object GET and PUT operations.
#
# Note that to effect the ENVs of the calling/invoking process, this script
# should be invoked with the "." command as in:
#
#   . ais/test/oci/mp_tuning.env

# For (full) object downloads, we will read (up to) the first OCI_MULTI_PART_DOWNLOAD_THRESHOLD
# bytes of the object. Upon return, we will know the total object size. If there are more
# bytes to read, we will shift to MultiPartDownload ("MPD") mode and read (up to)
# OCI_MULTI_PART_DOWNLOAD_MAX_THREADS segments at a time each (up to)
# OCI_MAX_DOWNLOAD_SEGMENT_SIZE bytes until enough threads have covered the total
# object size.

export OCI_MAX_DOWNLOAD_SEGMENT_SIZE="100000"
export OCI_MULTI_PART_DOWNLOAD_THRESHOLD="200000"
export OCI_MULTI_PART_DOWNLOAD_MAX_THREADS="4"

# For object uploads, we will know up front the total object size. If that size is less than
# or equal to OCI_MULTI_PART_UPLOAD_THRESHOLD, we will simply perform a simple PUT upload.
# Otherwise, we will shift to MultiPartUpload ("MPD") mode and PUT segments of (up to)
# OCI_MAX_UPLOAD_SEGMENT_SIZE using (up to) OCI_MULTI_PART_UPLOAD_MAX_THREADS at a time
# until enough threads have covered the total object size.

export OCI_MAX_UPLOAD_SEGMENT_SIZE="100000"
export OCI_MULTI_PART_UPLOAD_THRESHOLD="200000"
export OCI_MULTI_PART_UPLOAD_MAX_THREADS="4"

# For both (full) object downloads and object uploads, each each allotted up to their
# corresponding "MAX_THREADS" number of Golang goroutines. For a large number of such
# simultaneous operations, the total number of Golang goroutines may become excessive
# both in terms of the computational load as well as the memory committed for each. As
# such, we will limit the number of Golang goroutines utilized at any one time.

export OCI_MULTI_PART_THREAD_POOL_SIZE="256"

# GET_TEST_FILE_SIZE_NON_MP specifies a test file size that will not
# trigger either MPD mode nor MPU mode.

export OCI_TEST_FILE_SIZE_NON_MP=150000

# OCI_TEST_FILE_SIZE_SMALL_MP specifies a test file size that will
# trigger either MPD mode or MPD mode but result in the first batch
# of threads being sufficient to transfer the entire object.

export OCI_TEST_FILE_SIZE_SMALL_MP=250000

# OCI_TEST_FILE_SIZE_BIG_MP specifies a test file size the will
# trigger either MPD mode or MPU mode and will result in the first
# batch of threads being insufficient to transfer the entire object
# necessitating additional threads being subsequently launched.

export OCI_TEST_FILE_SIZE_BIG_MP=650000

# OCI_TEST_FILES_TOTAL specifies the number of files uploaded then downloaded
# as a stress test following the initial upload/download sequence performed
# for each of the above test file sizes. Test file sizes will cycle (round
# robin) over the three sizes performed initially.

export OCI_TEST_FILES_TOTAL=64

# OCI_TEST_FILES_PARALLEL specifies the number of such subsequent upload/download
# stress sequences will be performed in parallel.

export OCI_TEST_FILES_PARALLEL=16

# OCI_TEST_FILE_PUT_RETRY_LIMIT specifies the number of times a PutObject will
# be attempted for each test file.

export OCI_TEST_FILE_PUT_RETRY_LIMIT=10

# OCI_TEST_FILE_PUT_RETRY_DELAY specifies the number of milliseconds to delay
# before issuing a PutObject retry attempt.

export OCI_TEST_FILE_PUT_RETRY_DELAY=250

# OCI_TEST_FILE_GET_RETRY_LIMIT specifies the number of times a PutObject will
# be attempted for each test file.

export OCI_TEST_FILE_GET_RETRY_LIMIT=10

# OCI_TEST_FILE_GET_RETRY_DELAY specifies the number of milliseconds to delay
# before issuing a PutObject retry attempt.

export OCI_TEST_FILE_GET_RETRY_DELAY=250
